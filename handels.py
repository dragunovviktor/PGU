
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, timedelta
from Parser import Parser

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")],
        [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏")],
        [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 3 –Ω–µ–¥–µ–ª–∏")],
        [KeyboardButton(text="–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å")]
    ], resize_keyboard=True, one_time_keyboard=False
)

@router.message(F.command("start"))
async def cmd_start(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:\n\n"
        "1Ô∏è‚É£ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "2Ô∏è‚É£ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏\n"
        "3Ô∏è‚É£ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 3 –Ω–µ–¥–µ–ª–∏\n"
        "4Ô∏è‚É£ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "5Ô∏è‚É£ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É!",
        reply_markup=keyboard  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è
    )

@router.message(F.text)
async def handle_message(message: Message):
    text = message.text.lower()

    if text == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é":
        await send_schedule_for_weeks(message, weeks=1)
    elif text == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏":
        await send_schedule_for_weeks(message, weeks=2)
    elif text == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 3 –Ω–µ–¥–µ–ª–∏":
        await send_schedule_for_weeks(message, weeks=3)
    elif text == "–≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await send_full_schedule(message)
    elif text == "—É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å. –ù–∞–ø—Ä–∏–º–µ—Ä: 25.01.2025"
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—Ç—É
        try:
            date = datetime.strptime(message.text, '%d.%m.%Y')
            await send_schedule_for_date(message, date)
        except ValueError:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
            )

async def send_schedule_for_weeks(message: Message, weeks: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å.
    """
    parser = Parser(Parser.url)
    soup = parser.parse()

    if soup:
        full_schedule = parser.extract_schedule(soup)
        response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {weeks} {'–Ω–µ–¥–µ–ª—é' if weeks == 1 else '–Ω–µ–¥–µ–ª–∏'}:\n\n"

        start_date = datetime.now()
        end_date = start_date + timedelta(weeks=weeks)

        current_date = start_date
        while current_date < end_date:
            day_name = current_date.strftime('%A')  # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            formatted_date = current_date.strftime('%d.%m.%Y')  # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            if day_name in full_schedule:
                day_schedule = full_schedule[day_name]
                response += f"üìÖ **{day_name} ({formatted_date})**\n"

                for item in day_schedule:
                    time = item['time']
                    subject = item['subject']
                    response += f"üïí {time} - {subject}\n"

                response += "\n"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–Ω—è–º–∏
            else:
                response += f"üìÖ **{day_name} ({formatted_date})** - ‚ùå –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n\n"

            current_date += timedelta(days=1)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
            if len(response) > 3000:
                await message.answer(response)
                response = ""  # –û—á–∏—â–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if response:
            await message.answer(response)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_full_schedule(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """
    parser = Parser(Parser.url)
    soup = parser.parse()

    if soup:
        full_schedule = parser.extract_schedule(soup)
        response = "üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"

        for day, schedule in full_schedule.items():
            response += f"üìÖ **{day}**\n"
            for item in schedule:
                time = item['time']
                subject = item['subject']
                response += f"üïí {time} - {subject}\n"
            response += "\n"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–Ω—è–º–∏

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
            if len(response) > 3000:
                await message.answer(response)
                response = ""  # –û—á–∏—â–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if response:
            await message.answer(response)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_schedule_for_date(message: Message, date: datetime):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.
    """
    parser = Parser(Parser.url)
    soup = parser.parse()

    if soup:
        full_schedule = parser.extract_schedule(soup)
        day_name = date.strftime('%A')  # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        formatted_date = date.strftime('%d.%m.%Y')

        if day_name in full_schedule:
            day_schedule = full_schedule[day_name]
            response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {formatted_date} ({day_name}):\n\n"
            for item in day_schedule:
                time = item['time']
                subject = item['subject']
                response += f"üïí {time} - {subject}\n"
        else:
            response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {formatted_date} ({day_name}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

        await message.answer(response)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
